/// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Lifetime ‡πÉ‡∏ô Rust
///
/// ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏é‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 3 ‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Lifetime:
///
/// 1.‡∏ó‡∏∏‡∏Å reference parameter ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö lifetime parameter ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
/// 2.‡∏ñ‡πâ‡∏≤‡∏°‡∏µ input parameter ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î lifetime ‡πÉ‡∏´‡πâ output ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
/// 3.‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô method ‡∏°‡∏µ &self ‡∏´‡∏£‡∏∑‡∏≠ &mut self ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î lifetime ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å parameter ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
///
/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Lifetime ‡πÉ‡∏ô Rust
/// Lifetime syntax ‡πÉ‡∏ä‡πâ ' (apostrophe) ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πà‡∏ô <'a>
/// ‡πÇ‡∏î‡∏¢ Lifetime ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô <> ‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
/// ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ & ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
fn longest_map<'a>(map1: &'a str, map2: &'a str) -> &'a str {
    if map1.len() > map2.len() {
        map1
    } else {
        map2
    }
}

pub fn run() {
    // let treasure;
    // {
    //     let local_treasure = String::from("üí∞");
    //     treasure = &local_treasure;
    // }
    // println!("Treasure: {}", treasure); // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å local_treasure ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß

    let map1 = String::from("üó∫Ô∏èüó∫Ô∏è");
    let map2 = String::from("üìç");

    let chosen_map = longest_map(&map1, &map2);
    println!("Crabby 's longest map: {}", chosen_map);
}
