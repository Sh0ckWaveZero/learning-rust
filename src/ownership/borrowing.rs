/// กฏของการยืมค่าของ Rust มีดังนี้
/// 1. ตัวแปรสามารถยืมค่าได้หลายครั้ง แต่สามารถยืมค่าได้เพียงครั้งเดียวในเวลาเดียวกัน โดยใช้ &.
/// 2. เจ้าของสิทธิ์สามารถยืมค่าได้ ทั้งแบบ mutable และ immutable ในเวลาเดียวกัน
///
/// ตัวอย่างต่อไปนี้จะแสดงการใช้งานของ Borrowing ใน Rust
///
/// // การยืมค่าแบบ immutable
/// ```
/// let x = 5;
/// let y = &x;
/// println!("x: {}", x);
/// println!("y: {}", y);
/// ```
///
/// // การยืมค่าแบบ mutable
/// ```
/// let mut x = 5;
/// let y = &mut x;
/// *y += 1;
/// println!("x: {}", x); // ไม่สามารถใช้งานได้ เนื่องจาก x ถูกยืมไปแล้ว
/// println!("y: {}", y);
/// ```
pub fn run() {
    println!("=== Borrowing Immutable ===");
    // Rust จะประกาศตัวแปรที่เป็น immutable และ mutable ในคราวเดียวกันแม้จะใช้ชื่อตัวแปรเดียวกันก็ได้
    // การยืมค่าแบบ immutable
    // ตัวแปรสามารถยืมค่าได้หลายครั้ง แต่สามารถยืมค่าได้เพียงครั้งเดียวในเวลาเดียวกัน โดยใช้ &.
    let x = 5;
    let y = &x;
    println!("x: {}", x); // จะชี้ไปที่ค่าของ x โดยไม่ได้เปลี่ยนค่าของ x
    println!("y: {}", y); // จะชี้ไปที่ค่าของ x โดยไม่ได้เปลี่ยนค่าของ x
    println!("Address of x: {:p}", &x); // ตำแหน่งของ x จะไม่เปลี่ยนไป
    println!("Address of y: {:p}", y); // ตำแหน่งของ y จะไม่เปลี่ยนไป
    println! {""};
    println!("=== Borrowing Mutable ===");
    // การยืมค่าแบบ mutable
    // การยืมค่าแบบ mutable สามารถทำได้เพียงครั้งเดียวในเวลาเดียวกัน โดยใช้ &mut
    let mut x = 5; // ต้องประกาศตัวแปร x ใหม่เพื่อให้สามารถใช้งานได้
    let y = &mut x; // ต้องประกาศตัวแปร y ใหม่เพื่อให้สามารถใช้งานได้
    *y += 1; // ต้องใช้ pointer(*) ในการเข้าถึงค่าของ y ก่อนที่จะเปลี่ยนค่าของ y ได้
             // println!("x: {}", x); // ไม่สามารถใช้งานได้ เนื่องจาก x ถูกยืมไปแล้ว
    println!("Address of y: {:p}", y); // ตำแหน่งของ y จะเปลี่ยนไป เนื่องจากการยืมแบบ mutable
    println!("y: {}", y);
}
