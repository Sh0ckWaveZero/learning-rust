pub fn variables() {
    // 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ (mutability)
    println!("=== Variables and Mutability ===");
    let x = 5; // ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô Rust ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô immutable ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ
    println!("x is {}", x);

    let mut y = 10; // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πá‡∏ô mutable ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ mut ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    println!("y is {}", y);
    y = 20;
    println!("y is now {}", y);

    // 2. ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Types)
    println!("\n=== Basic Data Types ===");
    // ‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Rust ‡πÄ‡∏ä‡πà‡∏ô i32 ‡∏Ñ‡∏∑‡∏≠ 32 bits ‡∏´‡∏£‡∏∑‡∏≠ 4 bytes 
    // ‡∏™‡πà‡∏ß‡∏ô u32 ‡∏Ñ‡∏∑‡∏≠ unsigned 32 bits ‡∏´‡∏£‡∏∑‡∏≠ 4 bytes
    // ‡∏™‡πà‡∏ß‡∏ô f64 ‡∏Ñ‡∏∑‡∏≠ 64 bits ‡∏´‡∏£‡∏∑‡∏≠ 8 bytes
    // ‡∏™‡πà‡∏ß‡∏ô char ‡∏Ñ‡∏∑‡∏≠ 32 bits ‡∏´‡∏£‡∏∑‡∏≠ 4 bytes
    // ‡∏™‡πà‡∏ß‡∏ô bool ‡∏Ñ‡∏∑‡∏≠ 1 byte
    // Range i32 ‡∏Ñ‡∏∑‡∏≠ [-2^(n-1), 2^(n-1) - 1] ‡πÇ‡∏î‡∏¢ n ‡∏Ñ‡∏∑‡∏≠ 32 ‡∏à‡∏∞‡πÑ‡∏î‡πâ [-2^31, 2^31 - 1] ‡∏´‡∏£‡∏∑‡∏≠ [-2,147,483,648, 2,147,483,647]
    let integer: i32 = 42;
    let float: f64 = 3.14;
    let boolean: bool = true;
    let character: char = 'üòÄ';
    println!(
        "integer: {}, float: {}, boolean: {}, char: {}",
        integer, float, boolean, character
    );

    // 3. Constants (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
    println!("\n=== Constants ===");
    const MAX_POINTS: u32 = 100_000;
    println!("constant MAX_POINTS = {}", MAX_POINTS);

    // 4. Shadowing (‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£)
    println!("\n=== Shadowing ===");
    let spaces = "   "; // string
    println!("spaces is a string: '{}'", spaces);
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏Å‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ let ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ mut ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
    let spaces = spaces.len(); // number
    println!("spaces is now a number: {}", spaces);

    // 5. Scope and Shadowing (‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£)
    println!("\n=== Variable Scope ===");
    let outer = 1;
    {
        let inner = 2;
        println!("inner: {}, outer: {}", inner, outer);
    }
    println!("outer: {}", outer);
    // println!("inner: {}", inner); // ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ inner ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
}
