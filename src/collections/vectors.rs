pub fn run() {
    println!("=== Vectors ===");

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î String
    // ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Vector ‡∏Ñ‡∏∑‡∏≠
    // - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    // - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Vector ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
    // - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ index
    // - Vec::new() ‡∏Ñ‡∏∑‡∏≠ constructor ‡∏Ç‡∏≠‡∏á Vector ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á heap ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Vector ‡∏ô‡∏±‡πâ‡∏ô
    let mut treasures: Vec<String> = Vec::new();

    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Vector
    // {:?} ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Debug ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Vector ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ implement ‡∏Ç‡∏≠‡∏á Display
    // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ push() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Vector ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° capacity ‡∏ó‡∏µ‡∏•‡∏∞ 2 ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    treasures.push(String::from("üèÜ"));
    treasures.push(String::from("üóùÔ∏è"));
    treasures.push(String::from("üí∞"));
    treasures.push(String::from("üîÆ"));
    println!("Treasures length: {}", treasures.len());
    println!("Treasures capacity: {}", treasures.capacity());
    treasures.push(String::from("üíé"));
    println!("Treasures: {:?}", treasures);
    println!("Treasures length: {}", treasures.len());
    println!("Treasures capacity: {}", treasures.capacity());


    // 3. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ index ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let first = &treasures[0];
    println!("The first element is: {}", first);

    // 4. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ get() ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ‡∏ñ‡πâ‡∏≤ index ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∞ return None
    match treasures.get(1) {
        Some(second) => println!("The second element is: {}", second),
        None => println!("There is no second element."),
    }

    // 5. ‡∏Å‡∏≤‡∏£ loop ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    // ‡πÉ‡∏ä‡πâ & ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ loop ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for item in &treasures {
        println!("{}", item);
    }

    // 6. ‡∏Å‡∏≤‡∏£ loop ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    // ‡πÉ‡∏ä‡πâ &mut ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ loop ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    for item in &mut treasures {
        item.push_str(" =üí∞");
    }

    // 7. ‡∏Å‡∏≤‡∏£ loop ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for item in &treasures {
        println!("{}", item);
    }

    // Note ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Vector ‡πÉ‡∏ô Rust
    // .iter() ‡πÉ‡∏ä‡πâ loop ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // .into_iter() ‡πÉ‡∏ä‡πâ loop ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // .iter_mut() ‡πÉ‡∏ä‡πâ loop ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô .iter()
    let numbers = vec![1, 2, 3, 4, 5];
    for number in numbers.iter() {
        println!("Number .iter: {}", number);
    }

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô .into_iter()
    let numbers = vec![1, 2, 3, 4, 5];
    for number in numbers.into_iter() {
        println!("Number into_iter: {}", number);
    }

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô .iter_mut()
    let mut numbers = vec![1, 2, 3, 4, 5];
    for number in numbers.iter_mut() {
        *number += 10;
        println!("Number iter_mut: {}", number);
    }

    // 8. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô pop() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Vector
    let mut numbers = vec![1, 2, 3, 4, 5];
    let last = numbers.pop();
    println!("Last number: {:?}", last);

    // 9. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô remove() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° index ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 3, 4, 5];
    let second = numbers.remove(1);
    println!("Second number removed: {:?}", second);

    // 10. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô insert() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô index ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 3, 4, 5];
    numbers.insert(1, 10);
    println!("Numbers with 10 inserted: {:?}", numbers);

    // 11. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô split_at() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á Vector ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô
    let numbers = vec![1, 2, 3, 4, 5];
    let (left, right) = numbers.split_at(2);
    println!("Left: {:?}", left);
    println!("Right: {:?}", right);

    // 12. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô append() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Vector ‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á
    let mut numbers = vec![1, 2, 3];
    let mut other_numbers = vec![4, 5, 6];
    numbers.append(&mut other_numbers);
    println!("Numbers after append: {:?}", numbers);

    // 13. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô extend() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Iterator ‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á
    let mut numbers = vec![1, 2, 3];
    let other_numbers = vec![4, 5, 6];
    numbers.extend(other_numbers);
    println!("Numbers after extend: {:?}", numbers);

    // 14. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô clear() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Vector
    let mut numbers = vec![1, 2, 3];
    println!("Numbers before clear: {:?}", numbers);
    numbers.clear();
    println!("Numbers after clear: {:?}", numbers);

    // 15. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô drain() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡πÅ‡∏•‡∏∞ return Iterator ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before drain: {:?}", numbers);
    let mut iter = numbers.drain(1..4);
    println!("Drain 1..4: {:?}", iter.next());

    // 16. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô retain() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before retain: {:?}", numbers);
    numbers.retain(|&x| x % 2 == 0);
    println!("Numbers after retain: {:?}", numbers);

    // 17. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô resize() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Vector
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before resize: {:?}", numbers);
    numbers.resize(3, 0);
    println!("Numbers after resize: {:?}", numbers);

    // 18. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô reverse() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before reverse: {:?}", numbers);
    numbers.reverse();
    println!("Numbers after reverse: {:?}", numbers);

    // 19. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sort() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector
    let mut numbers = vec![5, 3, 1, 2, 4];
    println!("Numbers before sort: {:?}", numbers);
    numbers.sort();
    println!("Numbers after sort: {:?}", numbers);

    // 20. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sort_by() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![5, 3, 1, 2, 4];
    println!("Numbers before sort_by: {:?}", numbers);
    numbers.sort_by(|a, b| b.cmp(a));
    println!("Numbers after sort_by: {:?}", numbers);

    // 21. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sort_by_key() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏° key ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![5, 3, 1, 2, 4];
    println!("Numbers before sort_by_key: {:?}", numbers);
    numbers.sort_by_key(|a| a.to_string());
    println!("Numbers after sort_by_key: {:?}", numbers);

    // 22. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sort_by_cached_key() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏° key ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![5, 3, 1, 2, 4];
    println!("Numbers before sort_by_cached_key: {:?}", numbers);
    numbers.sort_by_cached_key(|a| a.to_string());
    println!("Numbers after sort_by_cached_key: {:?}", numbers);

    // 23. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô split_off() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á Vector ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before split_off: {:?}", numbers);
    let other_numbers = numbers.split_off(2);
    println!("Numbers after split_off: {:?}", numbers);
    println!("Other numbers: {:?}", other_numbers);

    // 24. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô swap() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏° index ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before swap: {:?}", numbers);
    numbers.swap(1, 3);
    println!("Numbers after swap: {:?}", numbers);

    // 25. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô truncate() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Vector ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà index ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡∏à‡∏ô‡∏à‡∏ö
    let mut numbers = vec![1, 2, 3, 4, 5];
    println!("Numbers before truncate: {:?}", numbers);
    numbers.truncate(2);
    println!("Numbers after truncate: {:?}", numbers);

    // 26. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dedup() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vector
    let mut numbers = vec![1, 2, 2, 3, 3, 4, 5];
    println!("Numbers before dedup: {:?}", numbers);
    numbers.dedup();
    println!("Numbers after dedup: {:?}", numbers);

    // 27. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dedup_by() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 2, 3, 3, 4, 5];
    println!("Numbers before dedup_by: {:?}", numbers);
    numbers.dedup_by(|a, b| a == b);
    println!("Numbers after dedup_by: {:?}", numbers);

    // 28. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dedup_by_key() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏° key ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 2, 3, 3, 4, 5];
    println!("Numbers before dedup_by_key: {:?}", numbers);
    numbers.dedup_by_key(|a| *a);
    println!("Numbers after dedup_by_key: {:?}", numbers);

    // 29. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dedup_by_key() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vector ‡∏ï‡∏≤‡∏° key ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let mut numbers = vec![1, 2, 2, 3, 3, 4, 5];
    println!("Numbers before dedup_by_key: {:?}", numbers);
    numbers.dedup_by_key(|a| *a);
    println!("Numbers after dedup_by_key: {:?}", numbers);
}
