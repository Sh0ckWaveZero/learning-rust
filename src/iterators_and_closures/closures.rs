pub fn run() {
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô closures ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    println!("\n=== closures ===");

    // 1. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ parameter
    let say_hello = || {
        println!("Hello, Crabby! ü¶Ä");
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ closure ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    say_hello();

    // 2. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ parameter
    let say_hello = |name: &str| {
        println!("Hello, {}! ü¶Ä", name);
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ closure ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    say_hello("Crabby");

    // 3. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£ return ‡∏Ñ‡πà‡∏≤
    let add = |a: i32, b: i32| -> i32 { a + b };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ closure ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    let result = add(10, 20);
    println!("result = {}", result);

    // 4. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ parameter ‡πÅ‡∏•‡∏∞ return ‡∏Ñ‡πà‡∏≤
    let add = |a: i32, b: i32| -> i32 {
        let result = a + b;
        println!("{} + {} = {}", a, b, result);
        result
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ closure ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    let result = add(10, 20);
    println!("result = {}", result);

    // 5. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á closure ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ parameter ‡πÅ‡∏•‡∏∞ return ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ parameter
    let add = |a: i32, b: i32| -> i32 {
        let result = a + b;
        println!("{} + {} = {}", a, b, result);
        result
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ closure ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    let result = add(10, 20);
    println!("result = {}", result);

    // 6. closures ‡∏Å‡∏±‡∏ö iterator
    let treasures = vec![100, 200, 300, 400];

    // ‡πÉ‡∏ä‡πâ iterator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô treasures ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    treasures.iter().for_each(|treasure| {
        println!("treasure = {}", treasure);
    });

    // 7. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ closures ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ filter ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let treasures = vec![100, 200, 300, 400];

    // ‡πÉ‡∏ä‡πâ iterator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ filter ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 200
    let filtered_treasures: Vec<i32> = treasures
        .iter()
        .filter(|&treasure| *treasure > 200)
        .cloned()
        .collect();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà filter ‡πÑ‡∏î‡πâ
    println!("filtered_treasures = {:?}", filtered_treasures);

    // 8. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ closures ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let treasures = vec![100, 200, 300, 400];

    // ‡πÉ‡∏ä‡πâ iterator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 200
    let mapped_treasures: Vec<i32> = treasures.iter().map(|treasure| treasure * 2).collect();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà map ‡πÑ‡∏î‡πâ
    println!("mapped_treasures = {:?}", mapped_treasures);

    // 9. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ closures ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ reduce ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let treasures = vec![100, 200, 300, 400];

    // ‡πÉ‡∏ä‡πâ iterator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ reduce ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 200
    let reduced_treasures: i32 = treasures.iter().fold(0, |acc, treasure| acc + treasure);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà reduce ‡πÑ‡∏î‡πâ
    println!("reduced_treasures = {:?}", reduced_treasures);

    // 10. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ closures ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sort ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let mut treasures = vec![100, 200, 300, 400];

    // ‡πÉ‡∏ä‡πâ iterator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sort ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    treasures.sort_by(|a, b| b.cmp(a));

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà sort ‡πÑ‡∏î‡πâ
    println!("sorted_treasures = {:?}", treasures);
}
